name: Release

on:
  push:
    # branches:
    #   - main  # 可根据实际情况修改分支名
    tags:
      - '*'  # 当有新标签被推送到仓库时触发工作流
permissions:
  contents: write # 授予写入仓库内容的权限

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # 检出代码到工作区
        with:
          fetch-depth: 0  # 检出所有历史记录和标签

      - name: Verify Git repository
        run: |
          if [ ! -d ".git" ]; then
            echo "Git repository is not initialized."
            exit 1
          fi

      - name: Set Git user information
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          echo "Git 用户邮箱: $(git config --global user.email)"
          echo "Git 用户名: $(git config --global user.name)"

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # 选择合适的 Node.js 版本
          cache: 'pnpm'  # 缓存 pnpm 依赖

      - name: Install dependencies
        run: pnpm install  # 使用 pnpm 安装项目依赖

      - name: Get latest tag and calculate next version
        id: version-calculator
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            next_version="0.0.1"
          else
            # 去除标签前缀（如果有的话，如 v）
            version=${latest_tag#v}
            # 分割版本号
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)
            #  自动递增 patch 版本
            # patch=$((patch + 1))
            # 引用最新的tag标签
            next_version="$major.$minor.$patch"
          fi
          echo "NEXT_VERSION=$next_version" >> $GITHUB_ENV
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"

      - name: Print next version
        run: |
          echo "计算得到的下一个版本号是: ${{ env.NEXT_VERSION }}"
          echo "当前环境变量 NEXT_VERSION 的值为: $NEXT_VERSION"

      - name: Run release script with calculated version
        run: |
          echo "当前工作目录: $(pwd)"
          echo "当前 GITHUB_REF: $GITHUB_REF"
          echo "当前 GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          # pnpm run release --release-as ${{ env.NEXT_VERSION }}
          chmod +w CHANGELOG.md
          pnpm run release --release-as ${{ env.NEXT_VERSION }} --skip.tag
          # 检查 CHANGELOG.md 文件是否存在且有修改
          if [ -f "CHANGELOG.md" ]; then
            echo "CHANGELOG.md 文件存在"
            git status --porcelain CHANGELOG.md
          else
            echo "CHANGELOG.md 文件不存在"
          fi
          
      - name: Commit and push Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 创建临时分支保存分离头指针状态下的所有提交
          git checkout -b temp_branch
          # 切换回 main 分支
          git checkout main
          # 合并临时分支到 main 分支
          git merge temp_branch --no-ff -m "Merge all detached HEAD commits"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md package.json
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "chore: 更新CHANGELOG"
          fi
          git push origin main
          # 可以选择删除临时分支
          git branch -d temp_branch
# ... 已有代码 ...